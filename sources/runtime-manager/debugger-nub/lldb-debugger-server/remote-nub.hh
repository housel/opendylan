// This file is generated by omniidl (C++ backend)- omniORB_4_2. Do not edit.
#ifndef __remote_nub_hh__
#define __remote_nub_hh__

#ifndef __CORBA_H_EXTERNAL_GUARD__
#include <omniORB4/CORBA.h>
#endif

#ifndef  USE_stub_in_nt_dll
# define USE_stub_in_nt_dll_NOT_DEFINED_remote_nub
#endif
#ifndef  USE_core_stub_in_nt_dll
# define USE_core_stub_in_nt_dll_NOT_DEFINED_remote_nub
#endif
#ifndef  USE_dyn_stub_in_nt_dll
# define USE_dyn_stub_in_nt_dll_NOT_DEFINED_remote_nub
#endif






#ifdef USE_stub_in_nt_dll
# ifndef USE_core_stub_in_nt_dll
#  define USE_core_stub_in_nt_dll
# endif
# ifndef USE_dyn_stub_in_nt_dll
#  define USE_dyn_stub_in_nt_dll
# endif
#endif

#ifdef _core_attr
# error "A local CPP macro _core_attr has already been defined."
#else
# ifdef  USE_core_stub_in_nt_dll
#  define _core_attr _OMNIORB_NTDLL_IMPORT
# else
#  define _core_attr
# endif
#endif

#ifdef _dyn_attr
# error "A local CPP macro _dyn_attr has already been defined."
#else
# ifdef  USE_dyn_stub_in_nt_dll
#  define _dyn_attr _OMNIORB_NTDLL_IMPORT
# else
#  define _dyn_attr
# endif
#endif



_CORBA_MODULE Rtmgr

_CORBA_MODULE_BEG

#ifndef __Rtmgr_mAccessPath__
#define __Rtmgr_mAccessPath__
  class AccessPath;
  class _objref_AccessPath;
  class _impl_AccessPath;
  
  typedef _objref_AccessPath* AccessPath_ptr;
  typedef AccessPath_ptr AccessPathRef;

  class AccessPath_Helper {
  public:
    typedef AccessPath_ptr _ptr_type;

    static _ptr_type _nil();
    static _CORBA_Boolean is_nil(_ptr_type);
    static void release(_ptr_type);
    static void duplicate(_ptr_type);
    static void marshalObjRef(_ptr_type, cdrStream&);
    static _ptr_type unmarshalObjRef(cdrStream&);
  };

  typedef _CORBA_ObjRef_Var<_objref_AccessPath, AccessPath_Helper> AccessPath_var;
  typedef _CORBA_ObjRef_OUT_arg<_objref_AccessPath,AccessPath_Helper > AccessPath_out;

#endif

  // interface AccessPath
  class AccessPath {
  public:
    // Declarations for this interface type.
    typedef AccessPath_ptr _ptr_type;
    typedef AccessPath_var _var_type;

    static _ptr_type _duplicate(_ptr_type);
    static _ptr_type _narrow(::CORBA::Object_ptr);
    static _ptr_type _unchecked_narrow(::CORBA::Object_ptr);
    
    static _ptr_type _nil();

    static inline void _marshalObjRef(_ptr_type, cdrStream&);

    static inline _ptr_type _unmarshalObjRef(cdrStream& s) {
      omniObjRef* o = omniObjRef::_unMarshal(_PD_repoId,s);
      if (o)
        return (_ptr_type) o->_ptrToObjRef(_PD_repoId);
      else
        return _nil();
    }

    static inline _ptr_type _fromObjRef(omniObjRef* o) {
      if (o)
        return (_ptr_type) o->_ptrToObjRef(_PD_repoId);
      else
        return _nil();
    }

    static _core_attr const char* _PD_repoId;

    // Other IDL defined within this scope.
    typedef ::CORBA::Long NUBINT;
    typedef ::CORBA::Long_out NUBINT_out;

    typedef ::CORBA::ULong RTARGET_ADDRESS;
    typedef ::CORBA::ULong_out RTARGET_ADDRESS_out;

    typedef ::CORBA::ULong RNUBPROCESS;
    typedef ::CORBA::ULong_out RNUBPROCESS_out;

    typedef ::CORBA::ULong RNUBTHREAD;
    typedef ::CORBA::ULong_out RNUBTHREAD_out;

  
  };

  class _objref_AccessPath :
    public virtual ::CORBA::Object,
    public virtual omniObjRef
  {
  public:
    // IDL operations
    void create_thread_stop_reason_handler(::Rtmgr::AccessPath::RNUBPROCESS process, ::Rtmgr::AccessPath::RNUBTHREAD thread, ::Rtmgr::AccessPath::NUBINT priority);
    void debugger_message(const char* message, ::Rtmgr::AccessPath::RTARGET_ADDRESS arg1, ::Rtmgr::AccessPath::RTARGET_ADDRESS arg2);
    void nub_debug_message(const char* message, ::Rtmgr::AccessPath::RTARGET_ADDRESS arg1, ::Rtmgr::AccessPath::RTARGET_ADDRESS arg2);
    void debugger_error(const char* message, ::Rtmgr::AccessPath::RTARGET_ADDRESS arg1, ::Rtmgr::AccessPath::RTARGET_ADDRESS arg2);

    // Constructors
    inline _objref_AccessPath()  { _PR_setobj(0); }  // nil
    _objref_AccessPath(omniIOR*, omniIdentity*);

  protected:
    virtual ~_objref_AccessPath();

    
  private:
    virtual void* _ptrToObjRef(const char*);

    _objref_AccessPath(const _objref_AccessPath&);
    _objref_AccessPath& operator = (const _objref_AccessPath&);
    // not implemented

    friend class AccessPath;
  };

  class _pof_AccessPath : public _OMNI_NS(proxyObjectFactory) {
  public:
    inline _pof_AccessPath() : _OMNI_NS(proxyObjectFactory)(AccessPath::_PD_repoId) {}
    virtual ~_pof_AccessPath();

    virtual omniObjRef* newObjRef(omniIOR*,omniIdentity*);
    virtual _CORBA_Boolean is_a(const char*) const;
  };

  class _impl_AccessPath :
    public virtual omniServant
  {
  public:
    virtual ~_impl_AccessPath();

    virtual void create_thread_stop_reason_handler(::Rtmgr::AccessPath::RNUBPROCESS process, ::Rtmgr::AccessPath::RNUBTHREAD thread, ::Rtmgr::AccessPath::NUBINT priority) = 0;
    virtual void debugger_message(const char* message, ::Rtmgr::AccessPath::RTARGET_ADDRESS arg1, ::Rtmgr::AccessPath::RTARGET_ADDRESS arg2) = 0;
    virtual void nub_debug_message(const char* message, ::Rtmgr::AccessPath::RTARGET_ADDRESS arg1, ::Rtmgr::AccessPath::RTARGET_ADDRESS arg2) = 0;
    virtual void debugger_error(const char* message, ::Rtmgr::AccessPath::RTARGET_ADDRESS arg1, ::Rtmgr::AccessPath::RTARGET_ADDRESS arg2) = 0;
    
  public:  // Really protected, workaround for xlC
    virtual _CORBA_Boolean _dispatch(omniCallHandle&);

  private:
    virtual void* _ptrToInterface(const char*);
    virtual const char* _mostDerivedRepoId();
    
  };


#ifndef __Rtmgr_mRemoteNub__
#define __Rtmgr_mRemoteNub__
  class RemoteNub;
  class _objref_RemoteNub;
  class _impl_RemoteNub;
  
  typedef _objref_RemoteNub* RemoteNub_ptr;
  typedef RemoteNub_ptr RemoteNubRef;

  class RemoteNub_Helper {
  public:
    typedef RemoteNub_ptr _ptr_type;

    static _ptr_type _nil();
    static _CORBA_Boolean is_nil(_ptr_type);
    static void release(_ptr_type);
    static void duplicate(_ptr_type);
    static void marshalObjRef(_ptr_type, cdrStream&);
    static _ptr_type unmarshalObjRef(cdrStream&);
  };

  typedef _CORBA_ObjRef_Var<_objref_RemoteNub, RemoteNub_Helper> RemoteNub_var;
  typedef _CORBA_ObjRef_OUT_arg<_objref_RemoteNub,RemoteNub_Helper > RemoteNub_out;

#endif

  // interface RemoteNub
  class RemoteNub {
  public:
    // Declarations for this interface type.
    typedef RemoteNub_ptr _ptr_type;
    typedef RemoteNub_var _var_type;

    static _ptr_type _duplicate(_ptr_type);
    static _ptr_type _narrow(::CORBA::Object_ptr);
    static _ptr_type _unchecked_narrow(::CORBA::Object_ptr);
    
    static _ptr_type _nil();

    static inline void _marshalObjRef(_ptr_type, cdrStream&);

    static inline _ptr_type _unmarshalObjRef(cdrStream& s) {
      omniObjRef* o = omniObjRef::_unMarshal(_PD_repoId,s);
      if (o)
        return (_ptr_type) o->_ptrToObjRef(_PD_repoId);
      else
        return _nil();
    }

    static inline _ptr_type _fromObjRef(omniObjRef* o) {
      if (o)
        return (_ptr_type) o->_ptrToObjRef(_PD_repoId);
      else
        return _nil();
    }

    static _core_attr const char* _PD_repoId;

    // Other IDL defined within this scope.
    typedef ::CORBA::Char INT8;
    typedef ::CORBA::Char_out INT8_out;

    typedef ::CORBA::Short INT16;
    typedef ::CORBA::Short_out INT16_out;

    typedef ::CORBA::Long INT32;
    typedef ::CORBA::Long_out INT32_out;

    typedef ::CORBA::Short UNICODE;
    typedef ::CORBA::Short_out UNICODE_out;

    typedef ::CORBA::Long NUBINT;
    typedef ::CORBA::Long_out NUBINT_out;

    typedef ::CORBA::Long NUB_INDEX;
    typedef ::CORBA::Long_out NUB_INDEX_out;

    typedef ::CORBA::Long NUB_ERROR;
    typedef ::CORBA::Long_out NUB_ERROR_out;

    typedef ::CORBA::Float NUBFLOAT;
    typedef ::CORBA::Float_out NUBFLOAT_out;

    typedef ::CORBA::Double NUBDOUBLE;
    typedef ::CORBA::Double_out NUBDOUBLE_out;

    typedef ::CORBA::Long TARGET_INT;
    typedef ::CORBA::Long_out TARGET_INT_out;

    typedef ::CORBA::ULong RNUBHANDLE;
    typedef ::CORBA::ULong_out RNUBHANDLE_out;

    typedef ::CORBA::ULong RNUB;
    typedef ::CORBA::ULong_out RNUB_out;

    typedef ::CORBA::ULong RSERVER;
    typedef ::CORBA::ULong_out RSERVER_out;

    typedef ::CORBA::ULong RNUBPROCESS;
    typedef ::CORBA::ULong_out RNUBPROCESS_out;

    typedef ::CORBA::ULong RNUBTHREAD;
    typedef ::CORBA::ULong_out RNUBTHREAD_out;

    typedef ::CORBA::ULong RNUBLIBRARY;
    typedef ::CORBA::ULong_out RNUBLIBRARY_out;

    typedef ::CORBA::ULong RTARGET_ADDRESS;
    typedef ::CORBA::ULong_out RTARGET_ADDRESS_out;

    typedef ::CORBA::ULong FLAG;
    typedef ::CORBA::ULong_out FLAG_out;

    class RTARGET_ADDRESS_SEQ_var;

    class RTARGET_ADDRESS_SEQ : public _CORBA_Unbounded_Sequence_w_FixSizeElement< RTARGET_ADDRESS, 4, 4 >  {
    public:
      typedef RTARGET_ADDRESS_SEQ_var _var_type;
      inline RTARGET_ADDRESS_SEQ() {}
      inline RTARGET_ADDRESS_SEQ(const RTARGET_ADDRESS_SEQ& _s)
        : _CORBA_Unbounded_Sequence_w_FixSizeElement< RTARGET_ADDRESS, 4, 4 > (_s) {}

      inline RTARGET_ADDRESS_SEQ(_CORBA_ULong _max)
        : _CORBA_Unbounded_Sequence_w_FixSizeElement< RTARGET_ADDRESS, 4, 4 > (_max) {}
      inline RTARGET_ADDRESS_SEQ(_CORBA_ULong _max, _CORBA_ULong _len, RTARGET_ADDRESS* _val, _CORBA_Boolean _rel=0)
        : _CORBA_Unbounded_Sequence_w_FixSizeElement< RTARGET_ADDRESS, 4, 4 > (_max, _len, _val, _rel) {}

    

      inline RTARGET_ADDRESS_SEQ& operator = (const RTARGET_ADDRESS_SEQ& _s) {
        _CORBA_Unbounded_Sequence_w_FixSizeElement< RTARGET_ADDRESS, 4, 4 > ::operator=(_s);
        return *this;
      }
    };

    class RTARGET_ADDRESS_SEQ_out;

    class RTARGET_ADDRESS_SEQ_var {
    public:
      inline RTARGET_ADDRESS_SEQ_var() : _pd_seq(0) {}
      inline RTARGET_ADDRESS_SEQ_var(RTARGET_ADDRESS_SEQ* _s) : _pd_seq(_s) {}
      inline RTARGET_ADDRESS_SEQ_var(const RTARGET_ADDRESS_SEQ_var& _s) {
        if (_s._pd_seq)  _pd_seq = new RTARGET_ADDRESS_SEQ(*_s._pd_seq);
        else             _pd_seq = 0;
      }
      inline ~RTARGET_ADDRESS_SEQ_var() { if (_pd_seq)  delete _pd_seq; }
        
      inline RTARGET_ADDRESS_SEQ_var& operator = (RTARGET_ADDRESS_SEQ* _s) {
        if (_pd_seq)  delete _pd_seq;
        _pd_seq = _s;
        return *this;
      }
      inline RTARGET_ADDRESS_SEQ_var& operator = (const RTARGET_ADDRESS_SEQ_var& _s) {
        if (&_s != this) {
          if (_s._pd_seq) {
            if (!_pd_seq)  _pd_seq = new RTARGET_ADDRESS_SEQ;
            *_pd_seq = *_s._pd_seq;
          }
          else if (_pd_seq) {
            delete _pd_seq;
            _pd_seq = 0;
          }
        }
        return *this;
      }
      inline RTARGET_ADDRESS& operator [] (_CORBA_ULong _s) {
        return (*_pd_seq)[_s];
      }

    

      inline RTARGET_ADDRESS_SEQ* operator -> () { return _pd_seq; }
      inline const RTARGET_ADDRESS_SEQ* operator -> () const { return _pd_seq; }
#if defined(__GNUG__)
      inline operator RTARGET_ADDRESS_SEQ& () const { return *_pd_seq; }
#else
      inline operator const RTARGET_ADDRESS_SEQ& () const { return *_pd_seq; }
      inline operator RTARGET_ADDRESS_SEQ& () { return *_pd_seq; }
#endif
        
      inline const RTARGET_ADDRESS_SEQ& in() const { return *_pd_seq; }
      inline RTARGET_ADDRESS_SEQ&       inout()    { return *_pd_seq; }
      inline RTARGET_ADDRESS_SEQ*&      out() {
        if (_pd_seq) { delete _pd_seq; _pd_seq = 0; }
        return _pd_seq;
      }
      inline RTARGET_ADDRESS_SEQ* _retn() { RTARGET_ADDRESS_SEQ* tmp = _pd_seq; _pd_seq = 0; return tmp; }
        
      friend class RTARGET_ADDRESS_SEQ_out;
      
    private:
      RTARGET_ADDRESS_SEQ* _pd_seq;
    };

    class RTARGET_ADDRESS_SEQ_out {
    public:
      inline RTARGET_ADDRESS_SEQ_out(RTARGET_ADDRESS_SEQ*& _s) : _data(_s) { _data = 0; }
      inline RTARGET_ADDRESS_SEQ_out(RTARGET_ADDRESS_SEQ_var& _s)
        : _data(_s._pd_seq) { _s = (RTARGET_ADDRESS_SEQ*) 0; }
      inline RTARGET_ADDRESS_SEQ_out(const RTARGET_ADDRESS_SEQ_out& _s) : _data(_s._data) {}
      inline RTARGET_ADDRESS_SEQ_out& operator = (const RTARGET_ADDRESS_SEQ_out& _s) {
        _data = _s._data;
        return *this;
      }
      inline RTARGET_ADDRESS_SEQ_out& operator = (RTARGET_ADDRESS_SEQ* _s) {
        _data = _s;
        return *this;
      }
      inline operator RTARGET_ADDRESS_SEQ*&()  { return _data; }
      inline RTARGET_ADDRESS_SEQ*& ptr()       { return _data; }
      inline RTARGET_ADDRESS_SEQ* operator->() { return _data; }

      inline RTARGET_ADDRESS& operator [] (_CORBA_ULong _i) {
        return (*_data)[_i];
      }

    

      RTARGET_ADDRESS_SEQ*& _data;

    private:
      RTARGET_ADDRESS_SEQ_out();
      RTARGET_ADDRESS_SEQ_out& operator=(const RTARGET_ADDRESS_SEQ_var&);
    };

    class STRING_SEQ_var;

    class STRING_SEQ : public _CORBA_Unbounded_Sequence_String {
    public:
      typedef STRING_SEQ_var _var_type;
      inline STRING_SEQ() {}
      inline STRING_SEQ(const STRING_SEQ& _s)
        : _CORBA_Unbounded_Sequence_String(_s) {}

      inline STRING_SEQ(_CORBA_ULong _max)
        : _CORBA_Unbounded_Sequence_String(_max) {}
      inline STRING_SEQ(_CORBA_ULong _max, _CORBA_ULong _len, char** _val, _CORBA_Boolean _rel=0)
        : _CORBA_Unbounded_Sequence_String(_max, _len, _val, _rel) {}

    

      inline STRING_SEQ& operator = (const STRING_SEQ& _s) {
        _CORBA_Unbounded_Sequence_String::operator=(_s);
        return *this;
      }
    };

    class STRING_SEQ_out;

    class STRING_SEQ_var {
    public:
      inline STRING_SEQ_var() : _pd_seq(0) {}
      inline STRING_SEQ_var(STRING_SEQ* _s) : _pd_seq(_s) {}
      inline STRING_SEQ_var(const STRING_SEQ_var& _s) {
        if (_s._pd_seq)  _pd_seq = new STRING_SEQ(*_s._pd_seq);
        else             _pd_seq = 0;
      }
      inline ~STRING_SEQ_var() { if (_pd_seq)  delete _pd_seq; }
        
      inline STRING_SEQ_var& operator = (STRING_SEQ* _s) {
        if (_pd_seq)  delete _pd_seq;
        _pd_seq = _s;
        return *this;
      }
      inline STRING_SEQ_var& operator = (const STRING_SEQ_var& _s) {
        if (&_s != this) {
          if (_s._pd_seq) {
            if (!_pd_seq)  _pd_seq = new STRING_SEQ;
            *_pd_seq = *_s._pd_seq;
          }
          else if (_pd_seq) {
            delete _pd_seq;
            _pd_seq = 0;
          }
        }
        return *this;
      }
      inline _CORBA_String_element operator [] (_CORBA_ULong _s) {
        return (*_pd_seq)[_s];
      }

    

      inline STRING_SEQ* operator -> () { return _pd_seq; }
      inline const STRING_SEQ* operator -> () const { return _pd_seq; }
#if defined(__GNUG__)
      inline operator STRING_SEQ& () const { return *_pd_seq; }
#else
      inline operator const STRING_SEQ& () const { return *_pd_seq; }
      inline operator STRING_SEQ& () { return *_pd_seq; }
#endif
        
      inline const STRING_SEQ& in() const { return *_pd_seq; }
      inline STRING_SEQ&       inout()    { return *_pd_seq; }
      inline STRING_SEQ*&      out() {
        if (_pd_seq) { delete _pd_seq; _pd_seq = 0; }
        return _pd_seq;
      }
      inline STRING_SEQ* _retn() { STRING_SEQ* tmp = _pd_seq; _pd_seq = 0; return tmp; }
        
      friend class STRING_SEQ_out;
      
    private:
      STRING_SEQ* _pd_seq;
    };

    class STRING_SEQ_out {
    public:
      inline STRING_SEQ_out(STRING_SEQ*& _s) : _data(_s) { _data = 0; }
      inline STRING_SEQ_out(STRING_SEQ_var& _s)
        : _data(_s._pd_seq) { _s = (STRING_SEQ*) 0; }
      inline STRING_SEQ_out(const STRING_SEQ_out& _s) : _data(_s._data) {}
      inline STRING_SEQ_out& operator = (const STRING_SEQ_out& _s) {
        _data = _s._data;
        return *this;
      }
      inline STRING_SEQ_out& operator = (STRING_SEQ* _s) {
        _data = _s;
        return *this;
      }
      inline operator STRING_SEQ*&()  { return _data; }
      inline STRING_SEQ*& ptr()       { return _data; }
      inline STRING_SEQ* operator->() { return _data; }

      inline _CORBA_String_element operator [] (_CORBA_ULong _i) {
        return (*_data)[_i];
      }

    

      STRING_SEQ*& _data;

    private:
      STRING_SEQ_out();
      STRING_SEQ_out& operator=(const STRING_SEQ_var&);
    };

  
  };

  class _objref_RemoteNub :
    public virtual ::CORBA::Object,
    public virtual omniObjRef
  {
  public:
    // IDL operations
    RemoteNub::RNUB process();
    AccessPath_ptr access_path();
    RemoteNub::RNUB create_and_debug_process(const char* command, const char* args, ::Rtmgr::RemoteNub::NUBINT path_count, ::Rtmgr::RemoteNub::NUBINT lib_count, const char* working_dir, ::Rtmgr::RemoteNub::NUBINT create_shell);
    RemoteNub::RNUB debug_active_process(const char* process_name, const char* process_id, ::CORBA::ULong actual_process_id, ::Rtmgr::RemoteNub::NUBINT path_count, const char* jit_info);
    RemoteNub::NUBINT remote_value_byte_size();
    RemoteNub::NUBINT get_process_page_fault_count();
    RemoteNub::NUBINT thread_os_priority(::Rtmgr::RemoteNub::RNUBTHREAD nubthread);
    RemoteNub::NUBINT get_thread_cpu_time(::Rtmgr::RemoteNub::RNUBTHREAD nubthread);
    RemoteNub::RTARGET_ADDRESS get_library_base_address(::Rtmgr::RemoteNub::RNUBLIBRARY dll);
    void get_library_version(::Rtmgr::RemoteNub::RNUBLIBRARY dll, ::Rtmgr::RemoteNub::NUBINT& maj, ::Rtmgr::RemoteNub::NUBINT& min);
    char* get_library_filename(::Rtmgr::RemoteNub::RNUBLIBRARY dll);
    char* get_library_undecorated_name(::Rtmgr::RemoteNub::RNUBLIBRARY dll);
    char* get_register_name(::Rtmgr::RemoteNub::NUB_INDEX reg);
    RemoteNub::NUBINT get_register_enumeration_code(::Rtmgr::RemoteNub::NUB_INDEX reg);
    void all_registers(::Rtmgr::RemoteNub::NUBINT& first, ::Rtmgr::RemoteNub::NUBINT& last);
    void general_registers(::Rtmgr::RemoteNub::NUBINT& first, ::Rtmgr::RemoteNub::NUBINT& last);
    void special_registers(::Rtmgr::RemoteNub::NUBINT& first, ::Rtmgr::RemoteNub::NUBINT& last);
    void floating_registers(::Rtmgr::RemoteNub::NUBINT& first, ::Rtmgr::RemoteNub::NUBINT& last);
    RemoteNub::NUBINT page_read_permission(::Rtmgr::RemoteNub::RTARGET_ADDRESS address);
    RemoteNub::NUBINT page_write_permission(::Rtmgr::RemoteNub::RTARGET_ADDRESS address);
    RemoteNub::NUBINT page_relative_address(::Rtmgr::RemoteNub::RTARGET_ADDRESS address, ::Rtmgr::RemoteNub::NUBINT& offset);
    RemoteNub::NUBINT virtual_page_size();
    RemoteNub::RTARGET_ADDRESS read_value_from_process_memory(::Rtmgr::RemoteNub::RTARGET_ADDRESS address, ::Rtmgr::RemoteNub::NUB_ERROR& status);
    void write_value_to_process_memory(::Rtmgr::RemoteNub::RTARGET_ADDRESS address, ::Rtmgr::RemoteNub::RTARGET_ADDRESS val, ::Rtmgr::RemoteNub::NUBINT& status);
    RemoteNub::RTARGET_ADDRESS calculate_stack_address(::Rtmgr::RemoteNub::RNUBTHREAD nubthread, ::Rtmgr::RemoteNub::NUBINT offset);
    char* target_address_to_string(::Rtmgr::RemoteNub::RTARGET_ADDRESS x, ::Rtmgr::RemoteNub::NUBINT sz, ::Rtmgr::RemoteNub::NUBINT radix, ::Rtmgr::RemoteNub::NUBINT pad, ::Rtmgr::RemoteNub::NUBINT& truncated);
    RemoteNub::RTARGET_ADDRESS string_to_target_address(::Rtmgr::RemoteNub::NUBINT sz, const char* buffer, ::Rtmgr::RemoteNub::NUBINT radix, ::Rtmgr::RemoteNub::NUBINT& overflow);
    RemoteNub::NUBFLOAT read_single_float_from_process_memory(::Rtmgr::RemoteNub::RTARGET_ADDRESS address, ::Rtmgr::RemoteNub::NUB_ERROR& status);
    void write_single_float_to_process_memory(::Rtmgr::RemoteNub::RTARGET_ADDRESS address, ::Rtmgr::RemoteNub::NUBFLOAT value, ::Rtmgr::RemoteNub::NUB_ERROR& status);
    RemoteNub::NUBDOUBLE read_double_float_from_process_memory(::Rtmgr::RemoteNub::RTARGET_ADDRESS address, ::Rtmgr::RemoteNub::NUB_ERROR& status);
    void write_double_float_to_process_memory(::Rtmgr::RemoteNub::RTARGET_ADDRESS address, ::Rtmgr::RemoteNub::NUBDOUBLE value, ::Rtmgr::RemoteNub::NUB_ERROR& status);
    void read_byte_string_from_process_memory(::Rtmgr::RemoteNub::RTARGET_ADDRESS address, ::Rtmgr::RemoteNub::NUBINT sz, ::CORBA::String_out buffer, ::Rtmgr::RemoteNub::NUB_ERROR& status);
    void write_byte_string_to_process_memory(::Rtmgr::RemoteNub::RTARGET_ADDRESS address, ::Rtmgr::RemoteNub::NUBINT sz, const char* buffer, ::Rtmgr::RemoteNub::NUB_ERROR& status);
    RemoteNub::RTARGET_ADDRESS read_value_from_process_register_in_stack_frame(::Rtmgr::RemoteNub::RNUBTHREAD nubthread, ::Rtmgr::RemoteNub::NUB_INDEX reg, ::Rtmgr::RemoteNub::NUB_INDEX frame_index, ::Rtmgr::RemoteNub::NUB_ERROR& status);
    RemoteNub::RTARGET_ADDRESS read_value_from_process_register(::Rtmgr::RemoteNub::RNUBTHREAD nubthread, ::Rtmgr::RemoteNub::NUB_INDEX reg, ::Rtmgr::RemoteNub::NUB_ERROR& status);
    void write_value_to_process_register(::Rtmgr::RemoteNub::RNUBTHREAD nubthread, ::Rtmgr::RemoteNub::NUB_INDEX reg, ::Rtmgr::RemoteNub::RTARGET_ADDRESS value, ::Rtmgr::RemoteNub::NUB_ERROR& status);
    RemoteNub::NUBFLOAT read_single_float_from_process_register(::Rtmgr::RemoteNub::RNUBTHREAD nubthread, ::Rtmgr::RemoteNub::NUB_INDEX reg, ::Rtmgr::RemoteNub::NUB_ERROR& status);
    void write_single_float_to_process_register(::Rtmgr::RemoteNub::RNUBTHREAD nubthread, ::Rtmgr::RemoteNub::NUB_INDEX reg, ::Rtmgr::RemoteNub::NUBFLOAT value, ::Rtmgr::RemoteNub::NUB_ERROR& status);
    RemoteNub::NUBDOUBLE read_double_float_from_process_register(::Rtmgr::RemoteNub::RNUBTHREAD nubthread, ::Rtmgr::RemoteNub::NUB_INDEX reg, ::Rtmgr::RemoteNub::NUB_ERROR& status);
    void write_double_float_to_process_register(::Rtmgr::RemoteNub::RNUBTHREAD nubthread, ::Rtmgr::RemoteNub::NUB_INDEX reg, ::Rtmgr::RemoteNub::NUBDOUBLE value, ::Rtmgr::RemoteNub::NUB_ERROR& status);
    void application_restart();
    void application_stop();
    void application_continue();
    void application_continue_unhandled();
    void application_step(::Rtmgr::RemoteNub::NUBINT n);
    void application_step_over(::Rtmgr::RemoteNub::NUBINT n);
    void application_step_out();
    RemoteNub::NUB_ERROR set_stepping_control_on_thread(::Rtmgr::RemoteNub::RNUBTHREAD nubthread, ::Rtmgr::RemoteNub::RTARGET_ADDRESS fp, ::Rtmgr::RemoteNub::RTARGET_ADDRESS calling_fp, ::Rtmgr::RemoteNub::NUBINT location_count, const ::Rtmgr::RemoteNub::RTARGET_ADDRESS_SEQ& locs, ::Rtmgr::RemoteNub::NUBINT operation);
    void clear_stepping_control_on_thread(::Rtmgr::RemoteNub::RNUBTHREAD nubthread);
    void thread_stop(::Rtmgr::RemoteNub::RNUBTHREAD nubthread);
    void thread_continue(::Rtmgr::RemoteNub::RNUBTHREAD nubthread);
    RemoteNub::NUBINT thread_suspendedQ(::Rtmgr::RemoteNub::RNUBTHREAD thread);
    void thread_suspended(::Rtmgr::RemoteNub::RNUBTHREAD thread);
    void thread_resumed(::Rtmgr::RemoteNub::RNUBTHREAD thread);
    RemoteNub::NUB_ERROR kill_application();
    void close_application();
    void close_remote_tether();
    RemoteNub::RTARGET_ADDRESS setup_function_call(::Rtmgr::RemoteNub::RNUBTHREAD nubthread, ::Rtmgr::RemoteNub::RTARGET_ADDRESS func, ::Rtmgr::RemoteNub::NUBINT arg_count, const ::Rtmgr::RemoteNub::RTARGET_ADDRESS_SEQ& args, ::Rtmgr::RemoteNub::RNUBHANDLE& cx_handle);
    RemoteNub::RTARGET_ADDRESS remote_call_spy(::Rtmgr::RemoteNub::RNUBTHREAD nubthread, ::Rtmgr::RemoteNub::RTARGET_ADDRESS func, ::Rtmgr::RemoteNub::NUBINT arg_count, const ::Rtmgr::RemoteNub::RTARGET_ADDRESS_SEQ& args, ::Rtmgr::RemoteNub::NUB_ERROR& status);
    RemoteNub::RTARGET_ADDRESS get_function_result(::Rtmgr::RemoteNub::RNUBTHREAD nubthread);
    void restore_context(::Rtmgr::RemoteNub::RNUBTHREAD nubthread, ::Rtmgr::RemoteNub::RNUBHANDLE the_context);
    RemoteNub::NUB_ERROR set_breakpoint(::Rtmgr::RemoteNub::RTARGET_ADDRESS address);
    RemoteNub::NUB_ERROR clear_breakpoint(::Rtmgr::RemoteNub::RTARGET_ADDRESS address);
    RemoteNub::NUBINT query_breakpoint(::Rtmgr::RemoteNub::RTARGET_ADDRESS address);
    void wait_for_stop_reason_with_timeout(::Rtmgr::RemoteNub::NUBINT timeout, ::Rtmgr::RemoteNub::NUBINT& code);
    void profile_wait_for_stop_reason_with_timeout(::Rtmgr::RemoteNub::NUBINT timeout, ::Rtmgr::RemoteNub::NUBINT profiling_interval, ::Rtmgr::RemoteNub::NUBINT& code);
    void inform_profiling_started();
    void inform_profiling_stopped();
    RemoteNub::NUBINT can_receive_first_chance(::Rtmgr::RemoteNub::NUBINT ecode);
    void set_first_chance(::Rtmgr::RemoteNub::NUBINT ecode);
    void unset_first_chance(::Rtmgr::RemoteNub::NUBINT ecode);
    RemoteNub::NUBINT thread_stop_information(::Rtmgr::RemoteNub::RNUBTHREAD nubthread, ::Rtmgr::RemoteNub::NUBINT& fchance, ::Rtmgr::RemoteNub::NUBINT& fstart, ::Rtmgr::RemoteNub::RTARGET_ADDRESS& ret_addr);
    void wait_for_stop_reason_no_timeout(::Rtmgr::RemoteNub::NUBINT& ecode);
    void profile_wait_for_stop_reason_no_timeout(::Rtmgr::RemoteNub::NUBINT profile_interval, ::Rtmgr::RemoteNub::NUBINT& ecode);
    RemoteNub::RNUB stop_reason_process();
    RemoteNub::RNUBTHREAD stop_reason_thread();
    RemoteNub::NUBINT first_hard_coded_breakpoint();
    RemoteNub::NUBINT stop_reason_process_exit_code();
    RemoteNub::NUBINT stop_reason_thread_exit_code();
    RemoteNub::RNUBLIBRARY stop_reason_library();
    RemoteNub::NUBINT stop_reason_violation_op();
    RemoteNub::NUBINT exception_first_chance();
    RemoteNub::RTARGET_ADDRESS stop_reason_violation_address();
    RemoteNub::RTARGET_ADDRESS stop_reason_exception_address();
    RemoteNub::RTARGET_ADDRESS stop_reason_debug_string_address();
    RemoteNub::NUBINT stop_reason_debug_string_length();
    RemoteNub::NUBINT stop_reason_debug_string_is_unicode();
    RemoteNub::NUBINT initialize_stack_vectors(::Rtmgr::RemoteNub::RNUBTHREAD nubthread);
    void read_stack_vectors(::Rtmgr::RemoteNub::RNUBTHREAD nubthread, ::Rtmgr::RemoteNub::NUBINT frame_count, ::Rtmgr::RemoteNub::RTARGET_ADDRESS_SEQ_out frame_pointers, ::Rtmgr::RemoteNub::RTARGET_ADDRESS_SEQ_out instruction_pointers, ::Rtmgr::RemoteNub::RTARGET_ADDRESS_SEQ_out return_addresses);
    void all_frame_lexicals(::Rtmgr::RemoteNub::RTARGET_ADDRESS frame, ::Rtmgr::RemoteNub::RTARGET_ADDRESS ip, ::Rtmgr::RemoteNub::NUB_INDEX& first, ::Rtmgr::RemoteNub::NUB_INDEX& last, ::Rtmgr::RemoteNub::RNUBHANDLE& table);
    void register_interactive_code_segment(::Rtmgr::RemoteNub::RTARGET_ADDRESS lo, ::Rtmgr::RemoteNub::RTARGET_ADDRESS hi);
    char* get_lexical_variable_name(::Rtmgr::RemoteNub::RNUBHANDLE table, ::Rtmgr::RemoteNub::NUB_INDEX variable);
    RemoteNub::RTARGET_ADDRESS lexical_variable_address(::Rtmgr::RemoteNub::RTARGET_ADDRESS fp, ::Rtmgr::RemoteNub::RNUBHANDLE table, ::Rtmgr::RemoteNub::NUB_INDEX variable, ::Rtmgr::RemoteNub::NUBINT& in_reg, ::Rtmgr::RemoteNub::NUB_INDEX& hireg, ::Rtmgr::RemoteNub::NUB_INDEX& loreg, ::Rtmgr::RemoteNub::NUBINT& arg);
    char* lookup_symbol_name(::Rtmgr::RemoteNub::RNUBHANDLE table, ::Rtmgr::RemoteNub::NUB_INDEX sym);
    RemoteNub::RTARGET_ADDRESS lookup_symbol_address(::Rtmgr::RemoteNub::RNUBHANDLE table, ::Rtmgr::RemoteNub::NUB_INDEX sym);
    RemoteNub::RTARGET_ADDRESS lookup_function_debug_start(::Rtmgr::RemoteNub::RNUBHANDLE table, ::Rtmgr::RemoteNub::NUB_INDEX sym);
    RemoteNub::RTARGET_ADDRESS lookup_function_debug_end(::Rtmgr::RemoteNub::RNUBHANDLE table, ::Rtmgr::RemoteNub::NUB_INDEX sym);
    RemoteNub::NUBINT lookup_symbol_language(::Rtmgr::RemoteNub::RNUBHANDLE table, ::Rtmgr::RemoteNub::NUB_INDEX sym);
    RemoteNub::RTARGET_ADDRESS lookup_function_end(::Rtmgr::RemoteNub::RNUBHANDLE table, ::Rtmgr::RemoteNub::NUB_INDEX sym);
    RemoteNub::NUBINT symbol_is_function(::Rtmgr::RemoteNub::RNUBHANDLE table, ::Rtmgr::RemoteNub::NUB_INDEX sym);
    RemoteNub::NUBINT nearest_symbols(::Rtmgr::RemoteNub::RTARGET_ADDRESS address, ::Rtmgr::RemoteNub::RNUBLIBRARY& lib, ::Rtmgr::RemoteNub::RNUBHANDLE& table);
    RemoteNub::NUBINT closest_symbol(::Rtmgr::RemoteNub::RTARGET_ADDRESS address, ::Rtmgr::RemoteNub::RNUBLIBRARY& lib, ::Rtmgr::RemoteNub::RTARGET_ADDRESS& actual_address, ::Rtmgr::RemoteNub::NUBINT& offset, ::Rtmgr::RemoteNub::NUBINT& name_length, ::Rtmgr::RemoteNub::NUBINT& type, ::Rtmgr::RemoteNub::NUBINT& is_function, ::Rtmgr::RemoteNub::RTARGET_ADDRESS& debug_start, ::Rtmgr::RemoteNub::RTARGET_ADDRESS& debug_end, ::Rtmgr::RemoteNub::NUBINT& language, ::Rtmgr::RemoteNub::RTARGET_ADDRESS& final_address_of_definition);
    void function_bounding_addresses(::Rtmgr::RemoteNub::RTARGET_ADDRESS address, ::Rtmgr::RemoteNub::RTARGET_ADDRESS& lower, ::Rtmgr::RemoteNub::RTARGET_ADDRESS& upper);
    char* closest_symbol_name(::Rtmgr::RemoteNub::NUBINT sz);
    RemoteNub::NUBINT find_symbol_in_library(::Rtmgr::RemoteNub::RNUBLIBRARY nublibrary, ::Rtmgr::RemoteNub::NUBINT sz, const char* name, ::Rtmgr::RemoteNub::RTARGET_ADDRESS& address, ::Rtmgr::RemoteNub::NUBINT& type, ::Rtmgr::RemoteNub::NUBINT& is_function, ::Rtmgr::RemoteNub::RTARGET_ADDRESS& debug_start, ::Rtmgr::RemoteNub::RTARGET_ADDRESS& debug_end, ::Rtmgr::RemoteNub::NUBINT& symbol_language, ::Rtmgr::RemoteNub::RTARGET_ADDRESS& final_address_of_definition);
    void dispose_lookups(::Rtmgr::RemoteNub::RNUBHANDLE lookups);
    RemoteNub::RTARGET_ADDRESS resolve_source_location(::Rtmgr::RemoteNub::RNUBLIBRARY nublibrary, const char* filename, ::Rtmgr::RemoteNub::NUBINT line_number, ::Rtmgr::RemoteNub::NUBINT column_number, ::Rtmgr::RemoteNub::NUBINT& valid, ::Rtmgr::RemoteNub::NUBINT& path, ::Rtmgr::RemoteNub::RNUBHANDLE& search, ::Rtmgr::RemoteNub::NUBINT& exact);
    RemoteNub::RNUBHANDLE fetch_source_locations(::Rtmgr::RemoteNub::RTARGET_ADDRESS start_loc, ::Rtmgr::RemoteNub::RTARGET_ADDRESS end_loc);
    RemoteNub::NUBINT source_location_address(::Rtmgr::RemoteNub::RNUBHANDLE table, ::Rtmgr::RemoteNub::NUB_INDEX index);
    RemoteNub::NUBINT source_location_linenumber(::Rtmgr::RemoteNub::RNUBHANDLE table, ::Rtmgr::RemoteNub::NUB_INDEX index);
    char* source_location_filename(::Rtmgr::RemoteNub::RNUBHANDLE table);
    RemoteNub::NUBINT number_of_source_locations(::Rtmgr::RemoteNub::RNUBHANDLE table);
    void dispose_source_locations(::Rtmgr::RemoteNub::RNUBHANDLE table);
    void interpret_instruction_at_current_location(::Rtmgr::RemoteNub::RNUBTHREAD nubthread, ::Rtmgr::RemoteNub::NUBINT& flow, ::Rtmgr::RemoteNub::RTARGET_ADDRESS& destination, ::Rtmgr::RemoteNub::NUBINT& instruction_size);
    RemoteNub::RTARGET_ADDRESS dylan_calculate_step_into(::Rtmgr::RemoteNub::RNUBTHREAD nubthread, ::Rtmgr::RemoteNub::NUBINT& function_register_live, ::Rtmgr::RemoteNub::NUBINT& ok);
    RemoteNub::RTARGET_ADDRESS dylan_thread_environment_block_address(::Rtmgr::RemoteNub::RNUBTHREAD thread, ::Rtmgr::RemoteNub::NUBINT& valid);
    RemoteNub::NUBINT dylan_thread_mv_buffer_live(::Rtmgr::RemoteNub::RNUBTHREAD thread);
    RemoteNub::NUBINT older_stack_frame(::Rtmgr::RemoteNub::RTARGET_ADDRESS this_one, ::Rtmgr::RemoteNub::RTARGET_ADDRESS than_this_one);
    RemoteNub::RTARGET_ADDRESS dylan_current_function(::Rtmgr::RemoteNub::RNUBTHREAD nubthread);
    RemoteNub::NUBINT perform_absolute_relocation(::Rtmgr::RemoteNub::RTARGET_ADDRESS address, ::Rtmgr::RemoteNub::RTARGET_ADDRESS destination);
    RemoteNub::NUBINT perform_relative_relocation(::Rtmgr::RemoteNub::RTARGET_ADDRESS address, ::Rtmgr::RemoteNub::RTARGET_ADDRESS destination);
    void recover_breakpoint(::Rtmgr::RemoteNub::RNUBTHREAD thread);
    RemoteNub::NUBINT get_process_wall_clock_time();
    void register_exit_process_function(::Rtmgr::RemoteNub::RTARGET_ADDRESS ExitProcess);
    RemoteNub::RNUB open_local_tether(const char* command, const char* args, const ::Rtmgr::RemoteNub::STRING_SEQ& paths, const ::Rtmgr::RemoteNub::STRING_SEQ& lib_paths, const char* working_directory, ::Rtmgr::RemoteNub::NUBINT create_shell, ::Rtmgr::RemoteNub::NUBINT& success);
    RemoteNub::RNUB attach_local_tether(::Rtmgr::RemoteNub::RNUBPROCESS process, const char* process_name, const char* process_system_id, ::Rtmgr::RemoteNub::RNUB process_actual_id, const ::Rtmgr::RemoteNub::STRING_SEQ& symbol_paths, const char* system_JIT_information, ::Rtmgr::RemoteNub::NUBINT& success);
    void OpenNub(::Rtmgr::AccessPath_ptr access_path);
    void CloseNub();

    // Constructors
    inline _objref_RemoteNub()  { _PR_setobj(0); }  // nil
    _objref_RemoteNub(omniIOR*, omniIdentity*);

  protected:
    virtual ~_objref_RemoteNub();

    
  private:
    virtual void* _ptrToObjRef(const char*);

    _objref_RemoteNub(const _objref_RemoteNub&);
    _objref_RemoteNub& operator = (const _objref_RemoteNub&);
    // not implemented

    friend class RemoteNub;
  };

  class _pof_RemoteNub : public _OMNI_NS(proxyObjectFactory) {
  public:
    inline _pof_RemoteNub() : _OMNI_NS(proxyObjectFactory)(RemoteNub::_PD_repoId) {}
    virtual ~_pof_RemoteNub();

    virtual omniObjRef* newObjRef(omniIOR*,omniIdentity*);
    virtual _CORBA_Boolean is_a(const char*) const;
  };

  class _impl_RemoteNub :
    public virtual omniServant
  {
  public:
    virtual ~_impl_RemoteNub();

    virtual RemoteNub::RNUB process() = 0;
    virtual AccessPath_ptr access_path() = 0;
    virtual RemoteNub::RNUB create_and_debug_process(const char* command, const char* args, ::Rtmgr::RemoteNub::NUBINT path_count, ::Rtmgr::RemoteNub::NUBINT lib_count, const char* working_dir, ::Rtmgr::RemoteNub::NUBINT create_shell) = 0;
    virtual RemoteNub::RNUB debug_active_process(const char* process_name, const char* process_id, ::CORBA::ULong actual_process_id, ::Rtmgr::RemoteNub::NUBINT path_count, const char* jit_info) = 0;
    virtual RemoteNub::NUBINT remote_value_byte_size() = 0;
    virtual RemoteNub::NUBINT get_process_page_fault_count() = 0;
    virtual RemoteNub::NUBINT thread_os_priority(::Rtmgr::RemoteNub::RNUBTHREAD nubthread) = 0;
    virtual RemoteNub::NUBINT get_thread_cpu_time(::Rtmgr::RemoteNub::RNUBTHREAD nubthread) = 0;
    virtual RemoteNub::RTARGET_ADDRESS get_library_base_address(::Rtmgr::RemoteNub::RNUBLIBRARY dll) = 0;
    virtual void get_library_version(::Rtmgr::RemoteNub::RNUBLIBRARY dll, ::Rtmgr::RemoteNub::NUBINT& maj, ::Rtmgr::RemoteNub::NUBINT& min) = 0;
    virtual char* get_library_filename(::Rtmgr::RemoteNub::RNUBLIBRARY dll) = 0;
    virtual char* get_library_undecorated_name(::Rtmgr::RemoteNub::RNUBLIBRARY dll) = 0;
    virtual char* get_register_name(::Rtmgr::RemoteNub::NUB_INDEX reg) = 0;
    virtual RemoteNub::NUBINT get_register_enumeration_code(::Rtmgr::RemoteNub::NUB_INDEX reg) = 0;
    virtual void all_registers(::Rtmgr::RemoteNub::NUBINT& first, ::Rtmgr::RemoteNub::NUBINT& last) = 0;
    virtual void general_registers(::Rtmgr::RemoteNub::NUBINT& first, ::Rtmgr::RemoteNub::NUBINT& last) = 0;
    virtual void special_registers(::Rtmgr::RemoteNub::NUBINT& first, ::Rtmgr::RemoteNub::NUBINT& last) = 0;
    virtual void floating_registers(::Rtmgr::RemoteNub::NUBINT& first, ::Rtmgr::RemoteNub::NUBINT& last) = 0;
    virtual RemoteNub::NUBINT page_read_permission(::Rtmgr::RemoteNub::RTARGET_ADDRESS address) = 0;
    virtual RemoteNub::NUBINT page_write_permission(::Rtmgr::RemoteNub::RTARGET_ADDRESS address) = 0;
    virtual RemoteNub::NUBINT page_relative_address(::Rtmgr::RemoteNub::RTARGET_ADDRESS address, ::Rtmgr::RemoteNub::NUBINT& offset) = 0;
    virtual RemoteNub::NUBINT virtual_page_size() = 0;
    virtual RemoteNub::RTARGET_ADDRESS read_value_from_process_memory(::Rtmgr::RemoteNub::RTARGET_ADDRESS address, ::Rtmgr::RemoteNub::NUB_ERROR& status) = 0;
    virtual void write_value_to_process_memory(::Rtmgr::RemoteNub::RTARGET_ADDRESS address, ::Rtmgr::RemoteNub::RTARGET_ADDRESS val, ::Rtmgr::RemoteNub::NUBINT& status) = 0;
    virtual RemoteNub::RTARGET_ADDRESS calculate_stack_address(::Rtmgr::RemoteNub::RNUBTHREAD nubthread, ::Rtmgr::RemoteNub::NUBINT offset) = 0;
    virtual char* target_address_to_string(::Rtmgr::RemoteNub::RTARGET_ADDRESS x, ::Rtmgr::RemoteNub::NUBINT sz, ::Rtmgr::RemoteNub::NUBINT radix, ::Rtmgr::RemoteNub::NUBINT pad, ::Rtmgr::RemoteNub::NUBINT& truncated) = 0;
    virtual RemoteNub::RTARGET_ADDRESS string_to_target_address(::Rtmgr::RemoteNub::NUBINT sz, const char* buffer, ::Rtmgr::RemoteNub::NUBINT radix, ::Rtmgr::RemoteNub::NUBINT& overflow) = 0;
    virtual RemoteNub::NUBFLOAT read_single_float_from_process_memory(::Rtmgr::RemoteNub::RTARGET_ADDRESS address, ::Rtmgr::RemoteNub::NUB_ERROR& status) = 0;
    virtual void write_single_float_to_process_memory(::Rtmgr::RemoteNub::RTARGET_ADDRESS address, ::Rtmgr::RemoteNub::NUBFLOAT value, ::Rtmgr::RemoteNub::NUB_ERROR& status) = 0;
    virtual RemoteNub::NUBDOUBLE read_double_float_from_process_memory(::Rtmgr::RemoteNub::RTARGET_ADDRESS address, ::Rtmgr::RemoteNub::NUB_ERROR& status) = 0;
    virtual void write_double_float_to_process_memory(::Rtmgr::RemoteNub::RTARGET_ADDRESS address, ::Rtmgr::RemoteNub::NUBDOUBLE value, ::Rtmgr::RemoteNub::NUB_ERROR& status) = 0;
    virtual void read_byte_string_from_process_memory(::Rtmgr::RemoteNub::RTARGET_ADDRESS address, ::Rtmgr::RemoteNub::NUBINT sz, ::CORBA::String_out buffer, ::Rtmgr::RemoteNub::NUB_ERROR& status) = 0;
    virtual void write_byte_string_to_process_memory(::Rtmgr::RemoteNub::RTARGET_ADDRESS address, ::Rtmgr::RemoteNub::NUBINT sz, const char* buffer, ::Rtmgr::RemoteNub::NUB_ERROR& status) = 0;
    virtual RemoteNub::RTARGET_ADDRESS read_value_from_process_register_in_stack_frame(::Rtmgr::RemoteNub::RNUBTHREAD nubthread, ::Rtmgr::RemoteNub::NUB_INDEX reg, ::Rtmgr::RemoteNub::NUB_INDEX frame_index, ::Rtmgr::RemoteNub::NUB_ERROR& status) = 0;
    virtual RemoteNub::RTARGET_ADDRESS read_value_from_process_register(::Rtmgr::RemoteNub::RNUBTHREAD nubthread, ::Rtmgr::RemoteNub::NUB_INDEX reg, ::Rtmgr::RemoteNub::NUB_ERROR& status) = 0;
    virtual void write_value_to_process_register(::Rtmgr::RemoteNub::RNUBTHREAD nubthread, ::Rtmgr::RemoteNub::NUB_INDEX reg, ::Rtmgr::RemoteNub::RTARGET_ADDRESS value, ::Rtmgr::RemoteNub::NUB_ERROR& status) = 0;
    virtual RemoteNub::NUBFLOAT read_single_float_from_process_register(::Rtmgr::RemoteNub::RNUBTHREAD nubthread, ::Rtmgr::RemoteNub::NUB_INDEX reg, ::Rtmgr::RemoteNub::NUB_ERROR& status) = 0;
    virtual void write_single_float_to_process_register(::Rtmgr::RemoteNub::RNUBTHREAD nubthread, ::Rtmgr::RemoteNub::NUB_INDEX reg, ::Rtmgr::RemoteNub::NUBFLOAT value, ::Rtmgr::RemoteNub::NUB_ERROR& status) = 0;
    virtual RemoteNub::NUBDOUBLE read_double_float_from_process_register(::Rtmgr::RemoteNub::RNUBTHREAD nubthread, ::Rtmgr::RemoteNub::NUB_INDEX reg, ::Rtmgr::RemoteNub::NUB_ERROR& status) = 0;
    virtual void write_double_float_to_process_register(::Rtmgr::RemoteNub::RNUBTHREAD nubthread, ::Rtmgr::RemoteNub::NUB_INDEX reg, ::Rtmgr::RemoteNub::NUBDOUBLE value, ::Rtmgr::RemoteNub::NUB_ERROR& status) = 0;
    virtual void application_restart() = 0;
    virtual void application_stop() = 0;
    virtual void application_continue() = 0;
    virtual void application_continue_unhandled() = 0;
    virtual void application_step(::Rtmgr::RemoteNub::NUBINT n) = 0;
    virtual void application_step_over(::Rtmgr::RemoteNub::NUBINT n) = 0;
    virtual void application_step_out() = 0;
    virtual RemoteNub::NUB_ERROR set_stepping_control_on_thread(::Rtmgr::RemoteNub::RNUBTHREAD nubthread, ::Rtmgr::RemoteNub::RTARGET_ADDRESS fp, ::Rtmgr::RemoteNub::RTARGET_ADDRESS calling_fp, ::Rtmgr::RemoteNub::NUBINT location_count, const ::Rtmgr::RemoteNub::RTARGET_ADDRESS_SEQ& locs, ::Rtmgr::RemoteNub::NUBINT operation) = 0;
    virtual void clear_stepping_control_on_thread(::Rtmgr::RemoteNub::RNUBTHREAD nubthread) = 0;
    virtual void thread_stop(::Rtmgr::RemoteNub::RNUBTHREAD nubthread) = 0;
    virtual void thread_continue(::Rtmgr::RemoteNub::RNUBTHREAD nubthread) = 0;
    virtual RemoteNub::NUBINT thread_suspendedQ(::Rtmgr::RemoteNub::RNUBTHREAD thread) = 0;
    virtual void thread_suspended(::Rtmgr::RemoteNub::RNUBTHREAD thread) = 0;
    virtual void thread_resumed(::Rtmgr::RemoteNub::RNUBTHREAD thread) = 0;
    virtual RemoteNub::NUB_ERROR kill_application() = 0;
    virtual void close_application() = 0;
    virtual void close_remote_tether() = 0;
    virtual RemoteNub::RTARGET_ADDRESS setup_function_call(::Rtmgr::RemoteNub::RNUBTHREAD nubthread, ::Rtmgr::RemoteNub::RTARGET_ADDRESS func, ::Rtmgr::RemoteNub::NUBINT arg_count, const ::Rtmgr::RemoteNub::RTARGET_ADDRESS_SEQ& args, ::Rtmgr::RemoteNub::RNUBHANDLE& cx_handle) = 0;
    virtual RemoteNub::RTARGET_ADDRESS remote_call_spy(::Rtmgr::RemoteNub::RNUBTHREAD nubthread, ::Rtmgr::RemoteNub::RTARGET_ADDRESS func, ::Rtmgr::RemoteNub::NUBINT arg_count, const ::Rtmgr::RemoteNub::RTARGET_ADDRESS_SEQ& args, ::Rtmgr::RemoteNub::NUB_ERROR& status) = 0;
    virtual RemoteNub::RTARGET_ADDRESS get_function_result(::Rtmgr::RemoteNub::RNUBTHREAD nubthread) = 0;
    virtual void restore_context(::Rtmgr::RemoteNub::RNUBTHREAD nubthread, ::Rtmgr::RemoteNub::RNUBHANDLE the_context) = 0;
    virtual RemoteNub::NUB_ERROR set_breakpoint(::Rtmgr::RemoteNub::RTARGET_ADDRESS address) = 0;
    virtual RemoteNub::NUB_ERROR clear_breakpoint(::Rtmgr::RemoteNub::RTARGET_ADDRESS address) = 0;
    virtual RemoteNub::NUBINT query_breakpoint(::Rtmgr::RemoteNub::RTARGET_ADDRESS address) = 0;
    virtual void wait_for_stop_reason_with_timeout(::Rtmgr::RemoteNub::NUBINT timeout, ::Rtmgr::RemoteNub::NUBINT& code) = 0;
    virtual void profile_wait_for_stop_reason_with_timeout(::Rtmgr::RemoteNub::NUBINT timeout, ::Rtmgr::RemoteNub::NUBINT profiling_interval, ::Rtmgr::RemoteNub::NUBINT& code) = 0;
    virtual void inform_profiling_started() = 0;
    virtual void inform_profiling_stopped() = 0;
    virtual RemoteNub::NUBINT can_receive_first_chance(::Rtmgr::RemoteNub::NUBINT ecode) = 0;
    virtual void set_first_chance(::Rtmgr::RemoteNub::NUBINT ecode) = 0;
    virtual void unset_first_chance(::Rtmgr::RemoteNub::NUBINT ecode) = 0;
    virtual RemoteNub::NUBINT thread_stop_information(::Rtmgr::RemoteNub::RNUBTHREAD nubthread, ::Rtmgr::RemoteNub::NUBINT& fchance, ::Rtmgr::RemoteNub::NUBINT& fstart, ::Rtmgr::RemoteNub::RTARGET_ADDRESS& ret_addr) = 0;
    virtual void wait_for_stop_reason_no_timeout(::Rtmgr::RemoteNub::NUBINT& ecode) = 0;
    virtual void profile_wait_for_stop_reason_no_timeout(::Rtmgr::RemoteNub::NUBINT profile_interval, ::Rtmgr::RemoteNub::NUBINT& ecode) = 0;
    virtual RemoteNub::RNUB stop_reason_process() = 0;
    virtual RemoteNub::RNUBTHREAD stop_reason_thread() = 0;
    virtual RemoteNub::NUBINT first_hard_coded_breakpoint() = 0;
    virtual RemoteNub::NUBINT stop_reason_process_exit_code() = 0;
    virtual RemoteNub::NUBINT stop_reason_thread_exit_code() = 0;
    virtual RemoteNub::RNUBLIBRARY stop_reason_library() = 0;
    virtual RemoteNub::NUBINT stop_reason_violation_op() = 0;
    virtual RemoteNub::NUBINT exception_first_chance() = 0;
    virtual RemoteNub::RTARGET_ADDRESS stop_reason_violation_address() = 0;
    virtual RemoteNub::RTARGET_ADDRESS stop_reason_exception_address() = 0;
    virtual RemoteNub::RTARGET_ADDRESS stop_reason_debug_string_address() = 0;
    virtual RemoteNub::NUBINT stop_reason_debug_string_length() = 0;
    virtual RemoteNub::NUBINT stop_reason_debug_string_is_unicode() = 0;
    virtual RemoteNub::NUBINT initialize_stack_vectors(::Rtmgr::RemoteNub::RNUBTHREAD nubthread) = 0;
    virtual void read_stack_vectors(::Rtmgr::RemoteNub::RNUBTHREAD nubthread, ::Rtmgr::RemoteNub::NUBINT frame_count, ::Rtmgr::RemoteNub::RTARGET_ADDRESS_SEQ_out frame_pointers, ::Rtmgr::RemoteNub::RTARGET_ADDRESS_SEQ_out instruction_pointers, ::Rtmgr::RemoteNub::RTARGET_ADDRESS_SEQ_out return_addresses) = 0;
    virtual void all_frame_lexicals(::Rtmgr::RemoteNub::RTARGET_ADDRESS frame, ::Rtmgr::RemoteNub::RTARGET_ADDRESS ip, ::Rtmgr::RemoteNub::NUB_INDEX& first, ::Rtmgr::RemoteNub::NUB_INDEX& last, ::Rtmgr::RemoteNub::RNUBHANDLE& table) = 0;
    virtual void register_interactive_code_segment(::Rtmgr::RemoteNub::RTARGET_ADDRESS lo, ::Rtmgr::RemoteNub::RTARGET_ADDRESS hi) = 0;
    virtual char* get_lexical_variable_name(::Rtmgr::RemoteNub::RNUBHANDLE table, ::Rtmgr::RemoteNub::NUB_INDEX variable) = 0;
    virtual RemoteNub::RTARGET_ADDRESS lexical_variable_address(::Rtmgr::RemoteNub::RTARGET_ADDRESS fp, ::Rtmgr::RemoteNub::RNUBHANDLE table, ::Rtmgr::RemoteNub::NUB_INDEX variable, ::Rtmgr::RemoteNub::NUBINT& in_reg, ::Rtmgr::RemoteNub::NUB_INDEX& hireg, ::Rtmgr::RemoteNub::NUB_INDEX& loreg, ::Rtmgr::RemoteNub::NUBINT& arg) = 0;
    virtual char* lookup_symbol_name(::Rtmgr::RemoteNub::RNUBHANDLE table, ::Rtmgr::RemoteNub::NUB_INDEX sym) = 0;
    virtual RemoteNub::RTARGET_ADDRESS lookup_symbol_address(::Rtmgr::RemoteNub::RNUBHANDLE table, ::Rtmgr::RemoteNub::NUB_INDEX sym) = 0;
    virtual RemoteNub::RTARGET_ADDRESS lookup_function_debug_start(::Rtmgr::RemoteNub::RNUBHANDLE table, ::Rtmgr::RemoteNub::NUB_INDEX sym) = 0;
    virtual RemoteNub::RTARGET_ADDRESS lookup_function_debug_end(::Rtmgr::RemoteNub::RNUBHANDLE table, ::Rtmgr::RemoteNub::NUB_INDEX sym) = 0;
    virtual RemoteNub::NUBINT lookup_symbol_language(::Rtmgr::RemoteNub::RNUBHANDLE table, ::Rtmgr::RemoteNub::NUB_INDEX sym) = 0;
    virtual RemoteNub::RTARGET_ADDRESS lookup_function_end(::Rtmgr::RemoteNub::RNUBHANDLE table, ::Rtmgr::RemoteNub::NUB_INDEX sym) = 0;
    virtual RemoteNub::NUBINT symbol_is_function(::Rtmgr::RemoteNub::RNUBHANDLE table, ::Rtmgr::RemoteNub::NUB_INDEX sym) = 0;
    virtual RemoteNub::NUBINT nearest_symbols(::Rtmgr::RemoteNub::RTARGET_ADDRESS address, ::Rtmgr::RemoteNub::RNUBLIBRARY& lib, ::Rtmgr::RemoteNub::RNUBHANDLE& table) = 0;
    virtual RemoteNub::NUBINT closest_symbol(::Rtmgr::RemoteNub::RTARGET_ADDRESS address, ::Rtmgr::RemoteNub::RNUBLIBRARY& lib, ::Rtmgr::RemoteNub::RTARGET_ADDRESS& actual_address, ::Rtmgr::RemoteNub::NUBINT& offset, ::Rtmgr::RemoteNub::NUBINT& name_length, ::Rtmgr::RemoteNub::NUBINT& type, ::Rtmgr::RemoteNub::NUBINT& is_function, ::Rtmgr::RemoteNub::RTARGET_ADDRESS& debug_start, ::Rtmgr::RemoteNub::RTARGET_ADDRESS& debug_end, ::Rtmgr::RemoteNub::NUBINT& language, ::Rtmgr::RemoteNub::RTARGET_ADDRESS& final_address_of_definition) = 0;
    virtual void function_bounding_addresses(::Rtmgr::RemoteNub::RTARGET_ADDRESS address, ::Rtmgr::RemoteNub::RTARGET_ADDRESS& lower, ::Rtmgr::RemoteNub::RTARGET_ADDRESS& upper) = 0;
    virtual char* closest_symbol_name(::Rtmgr::RemoteNub::NUBINT sz) = 0;
    virtual RemoteNub::NUBINT find_symbol_in_library(::Rtmgr::RemoteNub::RNUBLIBRARY nublibrary, ::Rtmgr::RemoteNub::NUBINT sz, const char* name, ::Rtmgr::RemoteNub::RTARGET_ADDRESS& address, ::Rtmgr::RemoteNub::NUBINT& type, ::Rtmgr::RemoteNub::NUBINT& is_function, ::Rtmgr::RemoteNub::RTARGET_ADDRESS& debug_start, ::Rtmgr::RemoteNub::RTARGET_ADDRESS& debug_end, ::Rtmgr::RemoteNub::NUBINT& symbol_language, ::Rtmgr::RemoteNub::RTARGET_ADDRESS& final_address_of_definition) = 0;
    virtual void dispose_lookups(::Rtmgr::RemoteNub::RNUBHANDLE lookups) = 0;
    virtual RemoteNub::RTARGET_ADDRESS resolve_source_location(::Rtmgr::RemoteNub::RNUBLIBRARY nublibrary, const char* filename, ::Rtmgr::RemoteNub::NUBINT line_number, ::Rtmgr::RemoteNub::NUBINT column_number, ::Rtmgr::RemoteNub::NUBINT& valid, ::Rtmgr::RemoteNub::NUBINT& path, ::Rtmgr::RemoteNub::RNUBHANDLE& search, ::Rtmgr::RemoteNub::NUBINT& exact) = 0;
    virtual RemoteNub::RNUBHANDLE fetch_source_locations(::Rtmgr::RemoteNub::RTARGET_ADDRESS start_loc, ::Rtmgr::RemoteNub::RTARGET_ADDRESS end_loc) = 0;
    virtual RemoteNub::NUBINT source_location_address(::Rtmgr::RemoteNub::RNUBHANDLE table, ::Rtmgr::RemoteNub::NUB_INDEX index) = 0;
    virtual RemoteNub::NUBINT source_location_linenumber(::Rtmgr::RemoteNub::RNUBHANDLE table, ::Rtmgr::RemoteNub::NUB_INDEX index) = 0;
    virtual char* source_location_filename(::Rtmgr::RemoteNub::RNUBHANDLE table) = 0;
    virtual RemoteNub::NUBINT number_of_source_locations(::Rtmgr::RemoteNub::RNUBHANDLE table) = 0;
    virtual void dispose_source_locations(::Rtmgr::RemoteNub::RNUBHANDLE table) = 0;
    virtual void interpret_instruction_at_current_location(::Rtmgr::RemoteNub::RNUBTHREAD nubthread, ::Rtmgr::RemoteNub::NUBINT& flow, ::Rtmgr::RemoteNub::RTARGET_ADDRESS& destination, ::Rtmgr::RemoteNub::NUBINT& instruction_size) = 0;
    virtual RemoteNub::RTARGET_ADDRESS dylan_calculate_step_into(::Rtmgr::RemoteNub::RNUBTHREAD nubthread, ::Rtmgr::RemoteNub::NUBINT& function_register_live, ::Rtmgr::RemoteNub::NUBINT& ok) = 0;
    virtual RemoteNub::RTARGET_ADDRESS dylan_thread_environment_block_address(::Rtmgr::RemoteNub::RNUBTHREAD thread, ::Rtmgr::RemoteNub::NUBINT& valid) = 0;
    virtual RemoteNub::NUBINT dylan_thread_mv_buffer_live(::Rtmgr::RemoteNub::RNUBTHREAD thread) = 0;
    virtual RemoteNub::NUBINT older_stack_frame(::Rtmgr::RemoteNub::RTARGET_ADDRESS this_one, ::Rtmgr::RemoteNub::RTARGET_ADDRESS than_this_one) = 0;
    virtual RemoteNub::RTARGET_ADDRESS dylan_current_function(::Rtmgr::RemoteNub::RNUBTHREAD nubthread) = 0;
    virtual RemoteNub::NUBINT perform_absolute_relocation(::Rtmgr::RemoteNub::RTARGET_ADDRESS address, ::Rtmgr::RemoteNub::RTARGET_ADDRESS destination) = 0;
    virtual RemoteNub::NUBINT perform_relative_relocation(::Rtmgr::RemoteNub::RTARGET_ADDRESS address, ::Rtmgr::RemoteNub::RTARGET_ADDRESS destination) = 0;
    virtual void recover_breakpoint(::Rtmgr::RemoteNub::RNUBTHREAD thread) = 0;
    virtual RemoteNub::NUBINT get_process_wall_clock_time() = 0;
    virtual void register_exit_process_function(::Rtmgr::RemoteNub::RTARGET_ADDRESS ExitProcess) = 0;
    virtual RemoteNub::RNUB open_local_tether(const char* command, const char* args, const ::Rtmgr::RemoteNub::STRING_SEQ& paths, const ::Rtmgr::RemoteNub::STRING_SEQ& lib_paths, const char* working_directory, ::Rtmgr::RemoteNub::NUBINT create_shell, ::Rtmgr::RemoteNub::NUBINT& success) = 0;
    virtual RemoteNub::RNUB attach_local_tether(::Rtmgr::RemoteNub::RNUBPROCESS process, const char* process_name, const char* process_system_id, ::Rtmgr::RemoteNub::RNUB process_actual_id, const ::Rtmgr::RemoteNub::STRING_SEQ& symbol_paths, const char* system_JIT_information, ::Rtmgr::RemoteNub::NUBINT& success) = 0;
    virtual void OpenNub(::Rtmgr::AccessPath_ptr access_path) = 0;
    virtual void CloseNub() = 0;
    
  public:  // Really protected, workaround for xlC
    virtual _CORBA_Boolean _dispatch(omniCallHandle&);

  private:
    virtual void* _ptrToInterface(const char*);
    virtual const char* _mostDerivedRepoId();
    
  };


#ifndef __Rtmgr_mNubServer__
#define __Rtmgr_mNubServer__
  class NubServer;
  class _objref_NubServer;
  class _impl_NubServer;
  
  typedef _objref_NubServer* NubServer_ptr;
  typedef NubServer_ptr NubServerRef;

  class NubServer_Helper {
  public:
    typedef NubServer_ptr _ptr_type;

    static _ptr_type _nil();
    static _CORBA_Boolean is_nil(_ptr_type);
    static void release(_ptr_type);
    static void duplicate(_ptr_type);
    static void marshalObjRef(_ptr_type, cdrStream&);
    static _ptr_type unmarshalObjRef(cdrStream&);
  };

  typedef _CORBA_ObjRef_Var<_objref_NubServer, NubServer_Helper> NubServer_var;
  typedef _CORBA_ObjRef_OUT_arg<_objref_NubServer,NubServer_Helper > NubServer_out;

#endif

  // interface NubServer
  class NubServer {
  public:
    // Declarations for this interface type.
    typedef NubServer_ptr _ptr_type;
    typedef NubServer_var _var_type;

    static _ptr_type _duplicate(_ptr_type);
    static _ptr_type _narrow(::CORBA::Object_ptr);
    static _ptr_type _unchecked_narrow(::CORBA::Object_ptr);
    
    static _ptr_type _nil();

    static inline void _marshalObjRef(_ptr_type, cdrStream&);

    static inline _ptr_type _unmarshalObjRef(cdrStream& s) {
      omniObjRef* o = omniObjRef::_unMarshal(_PD_repoId,s);
      if (o)
        return (_ptr_type) o->_ptrToObjRef(_PD_repoId);
      else
        return _nil();
    }

    static inline _ptr_type _fromObjRef(omniObjRef* o) {
      if (o)
        return (_ptr_type) o->_ptrToObjRef(_PD_repoId);
      else
        return _nil();
    }

    static _core_attr const char* _PD_repoId;

    // Other IDL defined within this scope.
    typedef ::CORBA::Long NUBINT;
    typedef ::CORBA::Long_out NUBINT_out;

    typedef ::CORBA::Long NUB_INDEX;
    typedef ::CORBA::Long_out NUB_INDEX_out;

    typedef ::CORBA::ULong RNUB;
    typedef ::CORBA::ULong_out RNUB_out;

    typedef ::CORBA::ULong RNUBPROCESS;
    typedef ::CORBA::ULong_out RNUBPROCESS_out;

    class RemoteNub_SEQ_var;

    class RemoteNub_SEQ : public _CORBA_Unbounded_Sequence_ObjRef< _objref_RemoteNub, _CORBA_ObjRef_Element< _objref_RemoteNub, RemoteNub_Helper> , RemoteNub_Helper >  {
    public:
      typedef RemoteNub_SEQ_var _var_type;
      inline RemoteNub_SEQ() {}
      inline RemoteNub_SEQ(const RemoteNub_SEQ& _s)
        : _CORBA_Unbounded_Sequence_ObjRef< _objref_RemoteNub, _CORBA_ObjRef_Element< _objref_RemoteNub, RemoteNub_Helper> , RemoteNub_Helper > (_s) {}

      inline RemoteNub_SEQ(_CORBA_ULong _max)
        : _CORBA_Unbounded_Sequence_ObjRef< _objref_RemoteNub, _CORBA_ObjRef_Element< _objref_RemoteNub, RemoteNub_Helper> , RemoteNub_Helper > (_max) {}
      inline RemoteNub_SEQ(_CORBA_ULong _max, _CORBA_ULong _len, RemoteNub_ptr* _val, _CORBA_Boolean _rel=0)
        : _CORBA_Unbounded_Sequence_ObjRef< _objref_RemoteNub, _CORBA_ObjRef_Element< _objref_RemoteNub, RemoteNub_Helper> , RemoteNub_Helper > (_max, _len, _val, _rel) {}

    

      inline RemoteNub_SEQ& operator = (const RemoteNub_SEQ& _s) {
        _CORBA_Unbounded_Sequence_ObjRef< _objref_RemoteNub, _CORBA_ObjRef_Element< _objref_RemoteNub, RemoteNub_Helper> , RemoteNub_Helper > ::operator=(_s);
        return *this;
      }
    };

    class RemoteNub_SEQ_out;

    class RemoteNub_SEQ_var {
    public:
      inline RemoteNub_SEQ_var() : _pd_seq(0) {}
      inline RemoteNub_SEQ_var(RemoteNub_SEQ* _s) : _pd_seq(_s) {}
      inline RemoteNub_SEQ_var(const RemoteNub_SEQ_var& _s) {
        if (_s._pd_seq)  _pd_seq = new RemoteNub_SEQ(*_s._pd_seq);
        else             _pd_seq = 0;
      }
      inline ~RemoteNub_SEQ_var() { if (_pd_seq)  delete _pd_seq; }
        
      inline RemoteNub_SEQ_var& operator = (RemoteNub_SEQ* _s) {
        if (_pd_seq)  delete _pd_seq;
        _pd_seq = _s;
        return *this;
      }
      inline RemoteNub_SEQ_var& operator = (const RemoteNub_SEQ_var& _s) {
        if (&_s != this) {
          if (_s._pd_seq) {
            if (!_pd_seq)  _pd_seq = new RemoteNub_SEQ;
            *_pd_seq = *_s._pd_seq;
          }
          else if (_pd_seq) {
            delete _pd_seq;
            _pd_seq = 0;
          }
        }
        return *this;
      }
      inline _CORBA_ObjRef_Element< _objref_RemoteNub, RemoteNub_Helper>  operator [] (_CORBA_ULong _s) {
        return (*_pd_seq)[_s];
      }

    

      inline RemoteNub_SEQ* operator -> () { return _pd_seq; }
      inline const RemoteNub_SEQ* operator -> () const { return _pd_seq; }
#if defined(__GNUG__)
      inline operator RemoteNub_SEQ& () const { return *_pd_seq; }
#else
      inline operator const RemoteNub_SEQ& () const { return *_pd_seq; }
      inline operator RemoteNub_SEQ& () { return *_pd_seq; }
#endif
        
      inline const RemoteNub_SEQ& in() const { return *_pd_seq; }
      inline RemoteNub_SEQ&       inout()    { return *_pd_seq; }
      inline RemoteNub_SEQ*&      out() {
        if (_pd_seq) { delete _pd_seq; _pd_seq = 0; }
        return _pd_seq;
      }
      inline RemoteNub_SEQ* _retn() { RemoteNub_SEQ* tmp = _pd_seq; _pd_seq = 0; return tmp; }
        
      friend class RemoteNub_SEQ_out;
      
    private:
      RemoteNub_SEQ* _pd_seq;
    };

    class RemoteNub_SEQ_out {
    public:
      inline RemoteNub_SEQ_out(RemoteNub_SEQ*& _s) : _data(_s) { _data = 0; }
      inline RemoteNub_SEQ_out(RemoteNub_SEQ_var& _s)
        : _data(_s._pd_seq) { _s = (RemoteNub_SEQ*) 0; }
      inline RemoteNub_SEQ_out(const RemoteNub_SEQ_out& _s) : _data(_s._data) {}
      inline RemoteNub_SEQ_out& operator = (const RemoteNub_SEQ_out& _s) {
        _data = _s._data;
        return *this;
      }
      inline RemoteNub_SEQ_out& operator = (RemoteNub_SEQ* _s) {
        _data = _s;
        return *this;
      }
      inline operator RemoteNub_SEQ*&()  { return _data; }
      inline RemoteNub_SEQ*& ptr()       { return _data; }
      inline RemoteNub_SEQ* operator->() { return _data; }

      inline _CORBA_ObjRef_Element< _objref_RemoteNub, RemoteNub_Helper>  operator [] (_CORBA_ULong _i) {
        return (*_data)[_i];
      }

    

      RemoteNub_SEQ*& _data;

    private:
      RemoteNub_SEQ_out();
      RemoteNub_SEQ_out& operator=(const RemoteNub_SEQ_var&);
    };

  
  };

  class _objref_NubServer :
    public virtual ::CORBA::Object,
    public virtual omniObjRef
  {
  public:
    // IDL operations
    NubServer::RemoteNub_SEQ* nubs();
    RemoteNub_ptr CreateNub(const char* process_name, const char* remote_machine);
    void DestroyNub(::Rtmgr::RemoteNub_ptr nub);
    void RegisterNub(::Rtmgr::RemoteNub_ptr nub, const char* process_name, const char* process_id, const char* remote_machine);
    void DeregisterNub(::Rtmgr::RemoteNub_ptr nub);
    void ShutdownServer();
    char* get_local_hostname();
    NubServer::NUBINT verify_local_password(const char* password, const char* remote_machine);
    NubServer::NUBINT update_local_process_list();
    NubServer::RNUBPROCESS local_process_nub_descriptor(::Rtmgr::NubServer::NUB_INDEX i);
    NubServer::NUBINT local_process_identifier(::Rtmgr::NubServer::RNUBPROCESS nubprocess);
    char* local_process_name(::Rtmgr::NubServer::NUB_INDEX i);
    char* local_process_system_identifier(::Rtmgr::NubServer::NUB_INDEX i);
    NubServer::RNUB local_process_actual_identifier(::Rtmgr::NubServer::NUB_INDEX i);

    // Constructors
    inline _objref_NubServer()  { _PR_setobj(0); }  // nil
    _objref_NubServer(omniIOR*, omniIdentity*);

  protected:
    virtual ~_objref_NubServer();

    
  private:
    virtual void* _ptrToObjRef(const char*);

    _objref_NubServer(const _objref_NubServer&);
    _objref_NubServer& operator = (const _objref_NubServer&);
    // not implemented

    friend class NubServer;
  };

  class _pof_NubServer : public _OMNI_NS(proxyObjectFactory) {
  public:
    inline _pof_NubServer() : _OMNI_NS(proxyObjectFactory)(NubServer::_PD_repoId) {}
    virtual ~_pof_NubServer();

    virtual omniObjRef* newObjRef(omniIOR*,omniIdentity*);
    virtual _CORBA_Boolean is_a(const char*) const;
  };

  class _impl_NubServer :
    public virtual omniServant
  {
  public:
    virtual ~_impl_NubServer();

    virtual NubServer::RemoteNub_SEQ* nubs() = 0;
    virtual RemoteNub_ptr CreateNub(const char* process_name, const char* remote_machine) = 0;
    virtual void DestroyNub(::Rtmgr::RemoteNub_ptr nub) = 0;
    virtual void RegisterNub(::Rtmgr::RemoteNub_ptr nub, const char* process_name, const char* process_id, const char* remote_machine) = 0;
    virtual void DeregisterNub(::Rtmgr::RemoteNub_ptr nub) = 0;
    virtual void ShutdownServer() = 0;
    virtual char* get_local_hostname() = 0;
    virtual NubServer::NUBINT verify_local_password(const char* password, const char* remote_machine) = 0;
    virtual NubServer::NUBINT update_local_process_list() = 0;
    virtual NubServer::RNUBPROCESS local_process_nub_descriptor(::Rtmgr::NubServer::NUB_INDEX i) = 0;
    virtual NubServer::NUBINT local_process_identifier(::Rtmgr::NubServer::RNUBPROCESS nubprocess) = 0;
    virtual char* local_process_name(::Rtmgr::NubServer::NUB_INDEX i) = 0;
    virtual char* local_process_system_identifier(::Rtmgr::NubServer::NUB_INDEX i) = 0;
    virtual NubServer::RNUB local_process_actual_identifier(::Rtmgr::NubServer::NUB_INDEX i) = 0;
    
  public:  // Really protected, workaround for xlC
    virtual _CORBA_Boolean _dispatch(omniCallHandle&);

  private:
    virtual void* _ptrToInterface(const char*);
    virtual const char* _mostDerivedRepoId();
    
  };


_CORBA_MODULE_END



_CORBA_MODULE POA_Rtmgr
_CORBA_MODULE_BEG

  class AccessPath :
    public virtual Rtmgr::_impl_AccessPath,
    public virtual ::PortableServer::ServantBase
  {
  public:
    virtual ~AccessPath();

    inline ::Rtmgr::AccessPath_ptr _this() {
      return (::Rtmgr::AccessPath_ptr) _do_this(::Rtmgr::AccessPath::_PD_repoId);
    }
  };

  class RemoteNub :
    public virtual Rtmgr::_impl_RemoteNub,
    public virtual ::PortableServer::ServantBase
  {
  public:
    virtual ~RemoteNub();

    inline ::Rtmgr::RemoteNub_ptr _this() {
      return (::Rtmgr::RemoteNub_ptr) _do_this(::Rtmgr::RemoteNub::_PD_repoId);
    }
  };

  class NubServer :
    public virtual Rtmgr::_impl_NubServer,
    public virtual ::PortableServer::ServantBase
  {
  public:
    virtual ~NubServer();

    inline ::Rtmgr::NubServer_ptr _this() {
      return (::Rtmgr::NubServer_ptr) _do_this(::Rtmgr::NubServer::_PD_repoId);
    }
  };

_CORBA_MODULE_END



_CORBA_MODULE OBV_Rtmgr
_CORBA_MODULE_BEG

_CORBA_MODULE_END





#undef _core_attr
#undef _dyn_attr



inline void
Rtmgr::AccessPath::_marshalObjRef(::Rtmgr::AccessPath_ptr obj, cdrStream& s) {
  omniObjRef::_marshal(obj->_PR_getobj(),s);
}

inline void
Rtmgr::RemoteNub::_marshalObjRef(::Rtmgr::RemoteNub_ptr obj, cdrStream& s) {
  omniObjRef::_marshal(obj->_PR_getobj(),s);
}

inline void
Rtmgr::NubServer::_marshalObjRef(::Rtmgr::NubServer_ptr obj, cdrStream& s) {
  omniObjRef::_marshal(obj->_PR_getobj(),s);
}



#ifdef   USE_stub_in_nt_dll_NOT_DEFINED_remote_nub
# undef  USE_stub_in_nt_dll
# undef  USE_stub_in_nt_dll_NOT_DEFINED_remote_nub
#endif
#ifdef   USE_core_stub_in_nt_dll_NOT_DEFINED_remote_nub
# undef  USE_core_stub_in_nt_dll
# undef  USE_core_stub_in_nt_dll_NOT_DEFINED_remote_nub
#endif
#ifdef   USE_dyn_stub_in_nt_dll_NOT_DEFINED_remote_nub
# undef  USE_dyn_stub_in_nt_dll
# undef  USE_dyn_stub_in_nt_dll_NOT_DEFINED_remote_nub
#endif

#endif  // __remote_nub_hh__

